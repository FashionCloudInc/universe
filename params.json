{"name":"Universe","tagline":"Crossfilter Query Interface, Schemas, and Dimension/Group Management","body":"# Universe\r\n[![Join the chat at https://gitter.im/crossfilter/universe](https://badges.gitter.im/crossfilter/universe.svg)](https://gitter.im/crossfilter/universe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n## A Crossfilter Query Interface for Everyone\r\nBefore Universe, a typical Crossfilter setup involved creating and keeping track of tons of dimensions and potentially hundreds of groups. These dimensions and groups then required intense map-reduce functions and an intimate knowledge with the inner-workings of Crossfilter to be productive.\r\n\r\n**Universe** skips this mess and allows you to query your data using a simple **JSON query syntax** or a powerful **SQL-based query language**\r\n\r\n### Installation\r\n\r\n**NPM**\r\n```shell\r\nnpm install --save-dev crossfilter-universe\r\n```\r\n\r\n**Download** from the [releases](https://github.com/crossfilter/universe/releases) page. Serve the universe.js or universe.min.js file in the top-level directory as part of your application.\r\n\r\n### Usage\r\nCreate a new universe by passing `universe` some data or a Crossfilter instance:\r\n\r\n```javascript\r\nvar myUniverse = universe([\r\n    {date: \"2011-11-14T16:17:54Z\",quantity: 2,total: 190,tip: 100,type: \"tab\",productIDs: [\"001\"]},\r\n    {date: \"2011-11-14T16:20:19Z\",quantity: 2,total: 190,tip: 100,type: \"tab\",productIDs: [\"001\", \"005\"]},\r\n    {date: \"2011-11-14T16:28:54Z\",quantity: 1,total: 300,tip: 200,type: \"visa\",productIDs: [\"004\", \"005\"]},\r\n    ...\r\n  ])\r\n\r\n// Or\r\n\r\nvar myUniverse = universe(myCrossfilter)\r\n```\r\n\r\nUse `find` to query:\r\n\r\n```javascript\r\nvar typeQuery = myUniverse.find({\r\n    // GroupBy the type key\r\n    groupBy: 'type'\r\n    columns: {\r\n      // Use a the built-in 'count' aggregation\r\n      $count: 'type'\r\n      // Create a custom 'quantity' column\r\n      quantity: {\r\n        // Limit 'the quantity' column to rows where quantity is greater than 50\r\n        $filter: {\r\n          quantity: {\r\n            $gt: 50\r\n          }\r\n        },\r\n        // Use the built-in 'sum' aggregation\r\n        $sum: 'quantity'\r\n      },\r\n    },\r\n  })\r\n```\r\n\r\nResults are accessed with a promise:\r\n\r\n```javascript\r\ntypeQuery.then(function(res) {\r\n\r\n  // Easily access the results\r\n  res.data === [{\r\n    \"key\": \"cash\",\r\n    \"value\": {\r\n      \"count\": 2,\r\n      \"quantity\": 3\r\n    }\r\n  }, {\r\n    \"key\": \"tab\",\r\n    \"value\": {\r\n      \"count\": 8,\r\n      \"quantity\": 16\r\n    }\r\n  }, {\r\n    \"key\": \"visa\",\r\n    \"value\": {\r\n      \"count\": 2,\r\n      \"quantity\": 2\r\n    }\r\n  }]\r\n\r\n  // Plot the data in DC.js using the dimension and group created for the query\r\n  dc.pieChart('#chart')\r\n    .dimension(res.dimension)\r\n    .group(res.group);\r\n\r\n  // Even access the crossfilter instance\r\n  var size = res.crossfilter.size()\r\n})\r\n```\r\n\r\nOptionally pre-compile dimensions with column definitions\r\n\r\n```javascript\r\nmyUniverse.column({\r\n  key: 'type',\r\n  type: 'string'\r\n})\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}